<?xml version="1.0" ?>
<raModuleDescription>
    <config id="config.middleware.littlefs_mxic_ospi_flash" path="fsp_cfg/rm_littlefs_mxic_ospi_flash_cfg.h" version="0">
        <property default="config.middleware.littlefs_mxic_ospi_flash.param_checking_enable.bsp" display="Parameter Checking Enable" id="config.middleware.littlefs_mxic_ospi_flash.param_checking_enable" description="If selected code for parameter checking is included in the build.">
            <option display="Default (BSP)" id="config.middleware.littlefs_mxic_ospi_flash.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.middleware.littlefs_mxic_ospi_flash.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.middleware.littlefs_mxic_ospi_flash.param_checking_enable.disabled" value="(0)"/>
        </property>
        <property default="BSP_FEATURE_OSPI_DEVICE_0_START_ADDRESS" display="OSPI Mapping Address" id="config.middleware.littlefs_mxic_ospi_flash.address" description="Input the OSPI Mapping Address.">       
        </property>
        <content>
		#define RM_LITTLEFS_MXIC_OSPI_FLASH_CFG_PARAM_CHECKING_ENABLE ${config.middleware.littlefs_mxic_ospi_flash.param_checking_enable}
		#define BSP_OSPI_DEVICE_ADDRESS ${config.middleware.littlefs_mxic_ospi_flash.address}
        </content>
    </config>
    <module id="module.middleware.littlefs_mxic_ospi_flash" display="Storage|LittleFS on MXIC OSPI Flash" config="config.middleware.littlefs_mxic_ospi_flash" common="1" version="0" visible="false">
        <constraint display="Unique name required for each instance">
            "${interface.middleware.rm_littlefs.${module.middleware.littlefs_mxic_ospi_flash.name}}" === "1"
        </constraint>
		<constraint display="Block size must be a multiple of the read and program sizes">
            (${module.middleware.littlefs_mxic_ospi_flash.block_size} % ${module.middleware.littlefs_mxic_ospi_flash.prog_size} === 0) &amp;&amp;
            (${module.middleware.littlefs_mxic_ospi_flash.block_size} % ${module.middleware.littlefs_mxic_ospi_flash.read_size} === 0)
        </constraint>
        <constraint display="Cache size must be a multiple of the read and program sizes">
            (${module.middleware.littlefs_mxic_ospi_flash.cache_size} % ${module.middleware.littlefs_mxic_ospi_flash.prog_size} === 0) &amp;&amp;
            (${module.middleware.littlefs_mxic_ospi_flash.cache_size} % ${module.middleware.littlefs_mxic_ospi_flash.read_size} === 0)
        </constraint>
        <constraint display="Cache size must be a factor of the block size">
            (${module.middleware.littlefs_mxic_ospi_flash.block_size} % ${module.middleware.littlefs_mxic_ospi_flash.cache_size} === 0)
        </constraint>
        <requires id="module.middleware.littlefs_mxic_ospi_flash.requires.r_ospi" interface="interface.driver.ospi_on_ospi" display="Add OSPI Implementation [Required]">
        </requires>
        <provides interface="interface.middleware.littlefs_port" />
        <provides interface="interface.middleware.rm_littlefs" />
        <provides interface="interface.middleware.rm_littlefs.${module.middleware.littlefs_mxic_ospi_flash.name}" />
        <property default="g_rm_littlefs${_instance}" display="Name" id="module.middleware.littlefs_mxic_ospi_flash.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.middleware.littlefs_mxic_ospi_flash.name}")</constraint>
        </property>
         <property display="Read Size" id="module.middleware.littlefs_mxic_ospi_flash.read_size" default="256" description="Minimum size of a block read. All read operations will be a multiple of this value.">
            <constraint display="Must be a non-negative integer">testInteger(${module.middleware.littlefs_mxic_ospi_flash.read_size}) &amp;&amp; (${module.middleware.littlefs_mxic_ospi_flash.read_size} &gt;= 0) </constraint>
        </property>
        <property display="Program Size" id="module.middleware.littlefs_mxic_ospi_flash.prog_size" default="256" description="Minimum size of a block program. All program operations will be a multiple of this value.">
            <constraint display="Must be a non-negative integer">testInteger(${module.middleware.littlefs_mxic_ospi_flash.prog_size}) &amp;&amp; (${module.middleware.littlefs_mxic_ospi_flash.prog_size} &gt;= 0) </constraint>
        </property>
        <property display="Block Size (bytes)" id="module.middleware.littlefs_mxic_ospi_flash.block_size" default="4096" description="Size of an erasable block. This does not impact RAM consumption and may be larger than the physical erase size. However, non-inlined files take up at minimum one block. Must be a multiple of the read and program sizes.">
            <constraint display="Must be a multiple of 64">testInteger(${module.middleware.littlefs_mxic_ospi_flash.block_size}) &amp;&amp; (${module.middleware.littlefs_mxic_ospi_flash.block_size} &gt;= 0) &amp;&amp; (${module.middleware.littlefs_mxic_ospi_flash.block_size} % 64 === 0) </constraint>
            <constraint display="Must be larger than 104 bytes">(${module.middleware.littlefs_mxic_ospi_flash.block_size} &gt;= 104)</constraint>
        </property>
        <property display="Block Count" id="module.middleware.littlefs_mxic_ospi_flash.block_count" default="1024" description="Number of erasable blocks on the device.">
        </property>
        <property display="Block Cycles" id="module.middleware.littlefs_mxic_ospi_flash.block_cycles" default="1024" description="Number of erase cycles before LittleFS evicts metadata logs and moves the metadata to another block. Suggested values are in the range 100-1000, with large values having better performance at the cost of less consistent wear distribution. Set to -1 to disable block-level wear-leveling.">
            <constraint display="Must be an integer">testInteger(${module.middleware.littlefs_mxic_ospi_flash.block_cycles})</constraint>
        </property>
        <property display="Cache Size" id="module.middleware.littlefs_mxic_ospi_flash.cache_size" default="256" description="Size of block caches. Each cache buffers a portion of a block in RAM. The LittleFS needs a read cache, a program cache, and one additional cache per file. Larger caches can improve performance by storing more data and reducing the number of disk accesses. Must be a multiple of the read and program sizes, and a factor of the block size.">
            <constraint display="Must be a non-negative integer">testInteger(${module.middleware.littlefs_mxic_ospi_flash.cache_size}) &amp;&amp; (${module.middleware.littlefs_mxic_ospi_flash.cache_size} &gt; 0) </constraint>
        </property>
        <property display="Lookahead Size" id="module.middleware.littlefs_mxic_ospi_flash.lookahead_size" default="16" description="Size of the lookahead buffer in bytes. A larger lookahead buffer increases the number of blocks found during an allocation pass. The lookahead buffer is stored as a compact bitmap, so each byte of RAM can track 8 blocks. Must be a multiple of 8.">
            <constraint display="Must be a non-negative multiple of 8">testInteger(${module.middleware.littlefs_mxic_ospi_flash.lookahead_size}) &amp;&amp; (${module.middleware.littlefs_mxic_ospi_flash.lookahead_size} &gt; 0) &amp;&amp; (${module.middleware.littlefs_mxic_ospi_flash.lookahead_size} % 8 === 0) </constraint>
        </property>
        <header>
        /** LittleFS on MXIC OSPI Flash Instance. */
        extern const rm_littlefs_instance_t ${module.middleware.littlefs_mxic_ospi_flash.name};
        extern rm_littlefs_flash_instance_ctrl_t ${module.middleware.littlefs_mxic_ospi_flash.name}_ctrl;
        extern const rm_littlefs_cfg_t ${module.middleware.littlefs_mxic_ospi_flash.name}_cfg;

        extern struct lfs ${module.middleware.littlefs_mxic_ospi_flash.name}_lfs;
        extern const struct lfs_config ${module.middleware.littlefs_mxic_ospi_flash.name}_lfs_cfg;

        </header>
        <includes>
#include "rm_littlefs_api.h"
#include "rm_littlefs_mxic_ospi_flash.h"
#include "lfs_util.h"
        </includes>
        <declarations>
rm_littlefs_flash_instance_ctrl_t ${module.middleware.littlefs_mxic_ospi_flash.name}_ctrl;

#ifdef LFS_NO_MALLOC
static uint8_t ${module.middleware.littlefs_mxic_ospi_flash.name}_read[${module.middleware.littlefs_mxic_ospi_flash.cache_size}];
static uint8_t ${module.middleware.littlefs_mxic_ospi_flash.name}_prog[${module.middleware.littlefs_mxic_ospi_flash.cache_size}];
static uint8_t ${module.middleware.littlefs_mxic_ospi_flash.name}_lookahead[${module.middleware.littlefs_mxic_ospi_flash.lookahead_size}];
#endif

struct lfs ${module.middleware.littlefs_mxic_ospi_flash.name}_lfs;

const struct lfs_config ${module.middleware.littlefs_mxic_ospi_flash.name}_lfs_cfg =
{
    .context = &amp;${module.middleware.littlefs_mxic_ospi_flash.name}_ctrl,
    .read    = &amp;rm_littlefs_flash_read,
    .prog    = &amp;rm_littlefs_flash_write,
    .erase   = &amp;rm_littlefs_flash_erase,
    .sync    = &amp;rm_littlefs_flash_sync,
    .read_size      = ${module.middleware.littlefs_mxic_ospi_flash.read_size},
    .prog_size      = ${module.middleware.littlefs_mxic_ospi_flash.prog_size},
    .block_size     = ${module.middleware.littlefs_mxic_ospi_flash.block_size},
    .block_count    = ${module.middleware.littlefs_mxic_ospi_flash.block_count},
    .block_cycles   = ${module.middleware.littlefs_mxic_ospi_flash.block_cycles},
    .cache_size     = ${module.middleware.littlefs_mxic_ospi_flash.cache_size},
    .lookahead_size = ${module.middleware.littlefs_mxic_ospi_flash.lookahead_size},
#ifdef LFS_NO_MALLOC
    .read_buffer = (void *) ${module.middleware.littlefs_mxic_ospi_flash.name}_read,
    .prog_buffer = (void *) ${module.middleware.littlefs_mxic_ospi_flash.name}_prog,
    .lookahead_buffer = (void *) ${module.middleware.littlefs_mxic_ospi_flash.name}_lookahead,

#endif
};

const rm_littlefs_flash_cfg_t ${module.middleware.littlefs_mxic_ospi_flash.name}_ext_cfg =
{
    .p_ospi = &amp;${module.middleware.littlefs_mxic_ospi_flash.requires.r_ospi::module.driver.ospi.name},
};

const rm_littlefs_cfg_t ${module.middleware.littlefs_mxic_ospi_flash.name}_cfg =
{
    .p_lfs_cfg    = &amp;${module.middleware.littlefs_mxic_ospi_flash.name}_lfs_cfg,
    .p_extend     = &amp;${module.middleware.littlefs_mxic_ospi_flash.name}_ext_cfg,
};

/* Instance structure to use this module. */
const rm_littlefs_instance_t ${module.middleware.littlefs_mxic_ospi_flash.name} =
{
    .p_ctrl        = &amp;${module.middleware.littlefs_mxic_ospi_flash.name}_ctrl,
    .p_cfg         = &amp;${module.middleware.littlefs_mxic_ospi_flash.name}_cfg,
    .p_api         = &amp;g_rm_littlefs_on_flash,
};
        </declarations>
        <functions>
        </functions>
    </module>
</raModuleDescription>

